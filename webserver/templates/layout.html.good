<!DOCTYPE html>
<html>
 <head>
  <title>GESI</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel=stylesheet type=text/css href="{{ url_for('static', filename='style.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='jquery.mobile.css') }}">
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="http://blueimp.github.io/Gallery/css/blueimp-gallery.min.css">

  <link rel=stylesheet type=text/css href="{{ url_for('static', filename='jquery.fileupload.css') }}">
  <link rel=stylesheet type=text/css href="{{ url_for('static', filename='jquery.fileupload-ui.css') }}">
  <script src="{{ url_for('static', filename='jquery.js') }}"></script>
  <script src="{{ url_for('static', filename='jquery.mobile.js') }}"></script>
  <script>
$SCRIPT_ROOT = {{ request.script_root|tojson|safe }};

function drawRow(rowData,id) {
    var className = 'soundInfoList' + id 
    var row = $("<ul class=" + className + ">");
    $('#' + id).append(row);
    row.append($("<li>Samplerate:" + rowData.samplerate + "</li>"));
    row.append($("<li>Length:" + rowData.length + "</li>"));
    row.append($("<li>channels:" + rowData.channels + "</li>"));
    row.append($("</ul>"));
}
 </script>

{{ fujs.js }}

  </head>
 <body>
  <div class=page>
   <a href="{{ url_for('show_entries',env='default',density='largo') }}"><h1>Gesi</h1></a>
   <div class=metanav>
   {% if not session.logged_in %}
     <a href="{{ url_for('login') }}">log in</a>
   {% else %}
     <a href="{{ url_for('update_db') }}">Update</a>
     <a href="{{ url_for('logout') }}">log out</a>
   {% endif %}
    </div>
   {% for message in get_flashed_messages() %}
     <div class=flash>{{ message }}</div>
    {% endfor %}
    {% block body %}{% endblock %}
 <script>
   $( ".switch" ).bind( "change", function(event, ui) {
     var url = flask_util.url_for('pdsend', {message: 'switch ' + $(".switch").val() });
     $.post(url)
          });
     $(".env-nav").click(function() {
       window.location = '/?env=' +$( this ).attr('id') + '&density={{ density }}'
      });
     $(".density-nav").click(function() {
       window.location = '/?env={{ env }}' + '&density=' + $( this ).attr('id') 
      });
      $(".l_play").click(function() {
        var $button = $( this );
        var url = flask_util.url_for('pdsend', {message: 'play ' + $button.attr('id') });
        $.post(url)
       });
       $(".sound_info").collapsible({expand: function(){
         $.getJSON($SCRIPT_ROOT + '/sound_info', {
           id: $(".info", this ).attr('id')
              }, function(data) {
               drawRow(data.info, data.id);
              });               
           }}).collapsible({collapse: function(){
             var c = $(".info", this ).attr('id');
              $(".soundInfoList" + c).remove();
        }});
</script>
<!-- The basic File Upload plugin -->

<!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
<script src="{{ url_for('static', filename='upload/vendor/jquery.ui.widget.js') }}"></script>
<!-- The Load Image plugin is included for the preview images and image resizing functionality -->
<script src="http://blueimp.github.io/JavaScript-Load-Image/js/load-image.min.js"></script>
<!-- The basic File Upload plugin -->
<script src="{{ url_for('static', filename='upload/jquery.fileupload.js') }}"></script>
<!-- The File Upload processing plugin -->
<script src="{{ url_for('static', filename='upload/jquery.fileupload-process.js') }}"></script>
<!-- The File Upload audio preview plugin -->
<script src="{{ url_for('static', filename='upload/jquery.fileupload-audio.js') }}"></script>
<!-- The File Upload validation plugin -->
<script src="{{ url_for('static', filename='upload/jquery.fileupload-validate.js') }}"></script>
<!-- The File Upload user interface plugin -->
<script src="{{ url_for('static', filename='upload/jquery.fileupload-ui.js') }}"></script>
<!-- The main application script -->
<script src="{{ url_for('static', filename='upload/main.js') }}"></script>
<script>
/*jslint unparam: true, regexp: true */
/*global window, $ */
$(function () {
'use strict';
// Change this to the location of your server-side upload handler:
 var url = flask_util.url_for('pdsend', {message: 'test'),
uploadButton = $('<button/>')
.addClass('btn btn-primary')
.prop('disabled', true)
.text('Processing...')
.on('click', function () {
var $this = $(this),
data = $this.data();
$this
.off('click')
.text('Abort')
.on('click', function () {
$this.remove();
data.abort();
});
data.submit().always(function () {
$this.remove();
});
});
$('#fileupload').fileupload({
url: url,
dataType: 'json',
autoUpload: false,
acceptFileTypes: /(\.|\/)(wav)$/i,
maxFileSize: 50000000, // 50 MB
// Enable image resizing, except for Android and Opera,
// which actually support image resizing, but fail to
// send Blob objects via XHR requests:
disableImageResize: /Android(?!.*Chrome)|Opera/
.test(window.navigator.userAgent),
previewMaxWidth: 100,
previewMaxHeight: 100,
previewCrop: true
}).on('fileuploadadd', function (e, data) {
data.context = $('<div/>').appendTo('#files');
$.each(data.files, function (index, file) {
var node = $('<p/>')
.append($('<span/>').text(file.name));
if (!index) {
node
.append('<br>')
.append(uploadButton.clone(true).data(data));
}
node.appendTo(data.context);
});
}).on('fileuploadprocessalways', function (e, data) {
var index = data.index,
file = data.files[index],
node = $(data.context.children()[index]);
if (file.preview) {
node
.prepend('<br>')
.prepend(file.preview);
}
if (file.error) {
node
.append('<br>')
.append($('<span class="text-danger"/>').text(file.error));
}
if (index + 1 === data.files.length) {
data.context.find('button')
.text('Upload')
.prop('disabled', !!data.files.error);
}
}).on('fileuploadprogressall', function (e, data) {
var progress = parseInt(data.loaded / data.total * 100, 10);
$('#progress .progress-bar').css(
'width',
progress + '%'
);
}).on('fileuploaddone', function (e, data) {
$.each(data.result.files, function (index, file) {
if (file.url) {
var link = $('<a>')
.attr('target', '_blank')
.prop('href', file.url);
$(data.context.children()[index])
.wrap(link);
} else if (file.error) {
var error = $('<span class="text-danger"/>').text(file.error);
$(data.context.children()[index])
.append('<br>')
.append(error);
}
});
}).on('fileuploadfail', function (e, data) {
$.each(data.files, function (index, file) {
var error = $('<span class="text-danger"/>').text('File upload failed.');
$(data.context.children()[index])
.append('<br>')
.append(error);
});
}).prop('disabled', !$.support.fileInput)
.parent().addClass($.support.fileInput ? undefined : 'disabled');
});
</script>
  </body>
</html>
